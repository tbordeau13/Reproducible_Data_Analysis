scatter_plot <- function(z) {
long_colony_counts <- pivot_longer(z,
cols = starts_with("T"),
names_to = "Time_Points",
values_to = "Cell_Density")
}
long_colony_counts <- pivot_longer(colony_counts,
cols = starts_with("T"),
names_to = "Time_Points",
values_to = "Cell_Density")
print(long_colony_counts)
melt_long_cc <- melt(long_colony_counts, id = "Time_Points")
ggplot(melt_long_data, aes(x = Time_Points, y = Cell_Density, colour = variable, group = variable)) +
geom_line()
melt_long_cc <- melt(long_colony_counts, id = "Time_Points")
ggplot(melt_long_cc, aes(x = Time_Points, y = Cell_Density, colour = variable, group = variable)) +
geom_line()
output$csv.plot <- renderPlot({
data <- input$data_file
ext <- tools::file_ext(data$datapath)
req(data)
validate(need(ext == "csv", "Please confirm uploaded file extension is saved
in a '.csv' format."))
data_1 <- read.csv(data$datapath, header = input$header)
long_data <- pivot_longer(data_1,
cols = !contains('Sample'),
names_to = "Time_Points",
values_to = "Cell_Density"
)
colony_counts <- read.csv("sample_data_1.csv")
scatter_plot <- function(z) {
long_colony_counts <- pivot_longer(z,
cols = starts_with("T"),
names_to = "Time_Points",
values_to = "Cell_Density")
}
long_colony_counts <- pivot_longer(colony_counts,
cols = starts_with("T"),
names_to = "Time_Points",
values_to = "Cell_Density")
print(long_colony_counts)
melt_long_cc <- melt(long_colony_counts, id = "Time_Points")
ggplot(melt_long_cc, aes(x = Time_Points, y = Cell_Density, colour = variable, group = variable)) +
geom_line()
})
server <- function(input,output){
### This output generates a table using the uploaded ".csv" file. It
### first generates the object 'data' from the 'input''data_file'. The
### extension is then obtained using the tools::file_ext command, to
### confirm the file extension is indeed ".csv". The following arguments
### will then require 2 things to be true.
### 1. The 'data' object is required, req(), to be present. This prevents
###    generation of an empty data plot.
### 2. The 'ext' object must be validated, validate(), as "csv". This
###    confirms that the uploaded data must be in a '.csv' format. If it
###    is not, an error message will be sent asking the user to confirm
###    the file format being uploaded.
### Assuming these are met, 'output$csv.data' object will be stored as a
### dataframe from the 'read.csv' command enacted on the uploaded file.
### It will also designate the "header" as the previously mentioned
### 'input$header' value, ensuring these two are equivalent.
output$csv.data <- renderTable({
data <- input$data_file
ext <- tools::file_ext(data$datapath)
req(data)
validate(need(ext == "csv", "Please confirm uploaded file extension is saved
in a '.csv' format."))
read.csv(data$datapath, header = input$header)
})
### Plot progress so far. The file is successfully connected to file upload.
### The 'data' and 'ext' features can likely be streamlined in the future,
### as they are repetitive, and will be used if we integrate stats as well,
### or any other tool. req() and validate() as well.
### The first two steps are straight forward, saving the data as an object.
### This, again, can probably be streamlined later. It stores the uploaded
### file as 'data_1'. It then pivots the data to a long format, taking all
### input columns and shifting them into three columns (Check my hw_09
### print(long_colony_counts), the output would be the same). The commands
### will probably need adjusting, but essentially here are the requirements.
### 1. The first data column with data to be compared MUST be named 'Sample'.
###    There are a couple of issues here. '.csv' files can be saved several
###    ways. If you save it as the default, comma delimited file type, this
###    will not work. This is due to the first column being named
###    differently than it appears in a program like excel. Instead of
###    saving as 'Sample' it will save as 'ï..Sample'. I tried adjusting the
###    code to account for this but got some errors.
output$csv.plot <- renderPlot({
data <- input$data_file
ext <- tools::file_ext(data$datapath)
req(data)
validate(need(ext == "csv", "Please confirm uploaded file extension is saved
in a '.csv' format."))
data_1 <- read.csv(data$datapath, header = input$header)
long_data <- pivot_longer(data_1,
cols = !contains('Sample'),
names_to = "Time_Points",
values_to = "Cell_Density"
)
colony_counts <- read.csv("sample_data_1.csv")
scatter_plot <- function(z) {
long_colony_counts <- pivot_longer(z,
cols = starts_with("T"),
names_to = "Time_Points",
values_to = "Cell_Density")
}
long_colony_counts <- pivot_longer(colony_counts,
cols = starts_with("T"),
names_to = "Time_Points",
values_to = "Cell_Density")
print(long_colony_counts)
melt_long_cc <- melt(long_colony_counts, id = "Time_Points")
ggplot(melt_long_cc, aes(x = Time_Points, y = Cell_Density, colour = variable, group = variable)) +
geom_line()
})
}
shinyApp(ui = ui, server = server)
colony_counts <- read.csv("sample_data_1.csv")
scatter_plot <- function(z) {
long_colony_counts <- pivot_longer(z,
cols = starts_with("T"),
names_to = "Time_Points",
values_to = "Cell_Density")
}
print(long_colony_counts)
melt_long_cc <- melt(long_colony_counts, id = "Time_Points")
ggplot(melt_long_cc, aes(x = Time_Points, y = Cell_Density, colour = variable, group = variable)) +
geom_line()
colony_counts <- read.csv("sample_data_1.csv")
scatter_plot <- function(z) {
long_colony_counts <- pivot_longer(z,
cols = starts_with("T"),
names_to = "Time_Points",
values_to = "Cell_Density")
}
colony_counts <- read.csv("sample_data_1.csv")
long_colony_counts <- pivot_longer(colony_counts,
cols = starts_with("T"),
names_to = "Time_Points",
values_to = "Cell_Density")
print(long_colony_counts)
melt_long_cc <- melt(long_colony_counts, id = "Time_Points")
ggplot(melt_long_cc, aes(x = Time_Points, y = Cell_Density, colour = variable, group = variable)) +
geom_line()
data_1 <- read.csv(data$datapath, header = input$header)
output$csv.plot <- renderPlot({
data <- input$data_file
ext <- tools::file_ext(data$datapath)
req(data)
validate(need(ext == "csv", "Please confirm uploaded file extension is saved
in a '.csv' format."))
data_1 <- read.csv(data$datapath, header = input$header)
)
colony_counts <- read.csv("sample_data_1.csv")
scatter_plot <- function(z) {
long_colony_counts <- pivot_longer(z,
cols = starts_with("T"),
names_to = "Time_Points",
values_to = "Cell_Density")
}
long_colony_counts <- pivot_longer(colony_counts,
cols = starts_with("T"),
names_to = "Time_Points",
values_to = "Cell_Density")
print(long_colony_counts)
melt_long_cc <- melt(long_colony_counts, id = "Time_Points")
ggplot(melt_long_cc, aes(x = Time_Points, y = Cell_Density, colour = variable, group = variable)) +
geom_line()
})
server <- function(input,output){
### This output generates a table using the uploaded ".csv" file. It
### first generates the object 'data' from the 'input''data_file'. The
### extension is then obtained using the tools::file_ext command, to
### confirm the file extension is indeed ".csv". The following arguments
### will then require 2 things to be true.
### 1. The 'data' object is required, req(), to be present. This prevents
###    generation of an empty data plot.
### 2. The 'ext' object must be validated, validate(), as "csv". This
###    confirms that the uploaded data must be in a '.csv' format. If it
###    is not, an error message will be sent asking the user to confirm
###    the file format being uploaded.
### Assuming these are met, 'output$csv.data' object will be stored as a
### dataframe from the 'read.csv' command enacted on the uploaded file.
### It will also designate the "header" as the previously mentioned
### 'input$header' value, ensuring these two are equivalent.
output$csv.data <- renderTable({
data <- input$data_file
ext <- tools::file_ext(data$datapath)
req(data)
validate(need(ext == "csv", "Please confirm uploaded file extension is saved
in a '.csv' format."))
read.csv(data$datapath, header = input$header)
})
### Plot progress so far. The file is successfully connected to file upload.
### The 'data' and 'ext' features can likely be streamlined in the future,
### as they are repetitive, and will be used if we integrate stats as well,
### or any other tool. req() and validate() as well.
### The first two steps are straight forward, saving the data as an object.
### This, again, can probably be streamlined later. It stores the uploaded
### file as 'data_1'. It then pivots the data to a long format, taking all
### input columns and shifting them into three columns (Check my hw_09
### print(long_colony_counts), the output would be the same). The commands
### will probably need adjusting, but essentially here are the requirements.
### 1. The first data column with data to be compared MUST be named 'Sample'.
###    There are a couple of issues here. '.csv' files can be saved several
###    ways. If you save it as the default, comma delimited file type, this
###    will not work. This is due to the first column being named
###    differently than it appears in a program like excel. Instead of
###    saving as 'Sample' it will save as 'ï..Sample'. I tried adjusting the
###    code to account for this but got some errors.
output$csv.plot <- renderPlot({
data <- input$data_file
ext <- tools::file_ext(data$datapath)
req(data)
validate(need(ext == "csv", "Please confirm uploaded file extension is saved
in a '.csv' format."))
data_1 <- read.csv(data$datapath, header = input$header)
)
colony_counts <- read.csv("sample_data_1.csv")
scatter_plot <- function(z) {
long_colony_counts <- pivot_longer(z,
cols = starts_with("T"),
names_to = "Time_Points",
values_to = "Cell_Density")
}
long_colony_counts <- pivot_longer(colony_counts,
cols = starts_with("T"),
names_to = "Time_Points",
values_to = "Cell_Density")
print(long_colony_counts)
melt_long_cc <- melt(long_colony_counts, id = "Time_Points")
ggplot(melt_long_cc, aes(x = Time_Points, y = Cell_Density, colour = variable, group = variable)) +
geom_line()
})
}
colony_counts <- read.csv("sample_data_1.csv")
scatter_plot <- function(z) {
long_colony_counts <- pivot_longer(z,
cols = starts_with("T"),
names_to = "Time_Points",
values_to = "Cell_Density")
}
long_colony_counts <- pivot_longer(colony_counts,
cols = starts_with("T"),
names_to = "Time_Points",
values_to = "Cell_Density")
print(long_colony_counts)
melt_long_cc <- melt(long_colony_counts, id = "Time_Points")
ggplot(melt_long_cc, aes(x = Time_Points, y = Cell_Density, colour = variable, group = variable)) +
geom_line()
output$csv.plot <- renderPlot({
data <- input$data_file
ext <- tools::file_ext(data$datapath)
req(data)
validate(need(ext == "csv", "Please confirm uploaded file extension is saved
in a '.csv' format."))
data_1 <- read.csv(data$datapath, header = input$header)
)
colony_counts <- read.csv("sample_data_1.csv")
scatter_plot <- function(z) {
long_colony_counts <- pivot_longer(z,
cols = starts_with("T"),
names_to = "Time_Points",
values_to = "Cell_Density")
}
long_colony_counts <- pivot_longer(colony_counts,
cols = starts_with("T"),
names_to = "Time_Points",
values_to = "Cell_Density")
print(long_colony_counts)
melt_long_cc <- melt(long_colony_counts, id = "Time_Points")
ggplot(melt_long_cc, aes(x = Time_Points, y = Cell_Density, colour = variable, group = variable)) +
geom_line()
})
shinyApp(ui = ui, server = server)
output$csv.plot <- renderPlot({
data <- input$data_file
ext <- tools::file_ext(data$datapath)
req(data)
validate(need(ext == "csv", "Please confirm uploaded file extension is saved
in a '.csv' format."))
data_1 <- read.csv(data$datapath, header = input$header)
)
colony_counts <- read.csv("sample_data_1.csv")
scatter_plot <- function(z) {
long_colony_counts <- pivot_longer(z,
cols = starts_with("T"),
names_to = "Time_Points",
values_to = "Cell_Density")
print(long_colony_counts)
melt_long_cc <- melt(long_colony_counts, id = "Time_Points")
ggplot(melt_long_cc, aes(x = Time_Points, y = Cell_Density, colour = variable, group = variable)) +
geom_line()
})
shinyApp(ui = ui, server = server)
output$csv.plot <- renderPlot({
data <- input$data_file
ext <- tools::file_ext(data$datapath)
req(data)
validate(need(ext == "csv", "Please confirm uploaded file extension is saved
in a '.csv' format."))
data_1 <- read.csv(data$datapath, header = input$header)
)
colony_counts <- read.csv("sample_data_1.csv")
scatter_plot <- function(z) {
long_colony_counts <- pivot_longer(z,
cols = starts_with("T"),
names_to = "Time_Points",
values_to = "Cell_Density")
print(long_colony_counts)
melt_long_cc <- melt(long_colony_counts, id = "Time_Points")
ggplot(melt_long_cc, aes(x = Time_Points, y = Cell_Density, colour = variable, group = variable)) +
geom_line()
})
shinyApp(ui = ui, server = server)
output$csv.plot <- renderPlot({
ext <- tools::file_ext(data$datapath)
req(data)
validate(need(ext == "csv", "Please confirm uploaded file extension is saved
in a '.csv' format."))
data_1 <- read.csv(data$datapath, header = input$header)
data_1 <- read.csv(data$datapath, header = input$header)
data_1 <- read.csv(data$datapath, header = input$header)
data_1 <- read.csv(data$datapath, header = input$header)
data_1 <- read.csv(data$datapath, header = input$header)
data_1 <- read.csv(data$datapath, header = input$header)
data_1 <- read.csv(data$datapath, header = input$header)
colony_counts <- read.csv("sample_data_1.csv")
scatter_plot <- function(z) {
long_colony_counts <- pivot_longer(z,
cols = starts_with("T"),
names_to = "Time_Points",
values_to = "Cell_Density")
print(long_colony_counts)
melt_long_cc <- melt(long_colony_counts, id = "Time_Points")
ggplot(melt_long_cc, aes(x = Time_Points, y = Cell_Density, colour = variable, group = variable)) +
geom_line()
}
shinyApp(ui = ui, server = server)
output$csv.plot <- renderPlot({
data <- input$data_file
ext <- tools::file_ext(data$datapath)
req(data)
validate(need(ext == "csv", "Please confirm uploaded file extension is saved
in a '.csv' format."))
data_1 <- read.csv(data$datapath, header = input$header)
)
colony_counts <- read.csv("sample_data_1.csv")
scatter_plot <- function(z) {
long_colony_counts <- pivot_longer(z,
cols = starts_with("T"),
names_to = "Time_Points",
values_to = "Cell_Density")
print(long_colony_counts)
melt_long_cc <- melt(long_colony_counts, id = "Time_Points")
ggplot(melt_long_cc, aes(x = Time_Points, y = Cell_Density, colour = variable, group = variable)) +
geom_line()
}
)
shinyApp(ui = ui, server = server)
output$csv.plot <- renderPlot({
data <- input$data_file
ext <- tools::file_ext(data$datapath)
req(data)
validate(need(ext == "csv", "Please confirm uploaded file extension is saved
in a '.csv' format."))
data_1 <- read.csv(data$datapath, header = input$header)
)
colony_counts <- read.csv("sample_data_1.csv")
scatter_plot <- function(z) {
long_colony_counts <- pivot_longer(z,
cols = starts_with("T"),
names_to = "Time_Points",
values_to = "Cell_Density")
print(long_colony_counts)
melt_long_cc <- melt(long_colony_counts, id = "Time_Points")
ggplot(melt_long_cc, aes(x = Time_Points, y = Cell_Density, colour = variable, group = variable)) +
geom_line()
)}
shinyApp(ui = ui, server = server)
output$csv.plot <- renderPlot({
data <- input$data_file
ext <- tools::file_ext(data$datapath)
req(data)
validate(need(ext == "csv", "Please confirm uploaded file extension is saved
in a '.csv' format."))
data_1 <- read.csv(data$datapath, header = input$header)
)
colony_counts <- read.csv("sample_data_1.csv")
scatter_plot <- function(z) {
long_colony_counts <- pivot_longer(z,
cols = starts_with("T"),
names_to = "Time_Points",
values_to = "Cell_Density")
print(long_colony_counts)
melt_long_cc <- melt(long_colony_counts, id = "Time_Points")
ggplot(melt_long_cc, aes(x = Time_Points, y = Cell_Density, colour = variable, group = variable)) +
geom_line()
})
shinyApp(ui = ui, server = server)
output$csv.plot <- renderPlot({
ext <- tools::file_ext(data$datapath)
req(data)
validate(need(ext == "csv", "Please confirm uploaded file extension is saved
in a '.csv' format."))
data_1 <- read.csv(data$datapath, header = input$header)
data_1 <- read.csv(data$datapath, header = input$header)
output$csv.plot <- renderPlot({
ext <- tools::file_ext(data$datapath)
req(data)
validate(need(ext == "csv", "Please confirm uploaded file extension is saved
in a '.csv' format."))
data_1 <- read.csv(data$datapath, header = input$header)
data_1 <- read.csv(data$datapath, header = input$header)
colony_counts <- read.csv("sample_data_1.csv")
scatter_plot <- function(z) {
long_colony_counts <- pivot_longer(z,
cols = starts_with("T"),
names_to = "Time_Points",
values_to = "Cell_Density")
print(long_colony_counts)
melt_long_cc <- melt(long_colony_counts, id = "Time_Points")
ggplot(melt_long_cc, aes(x = Time_Points, y = Cell_Density, colour = variable, group = variable)) +
geom_line()
)
shinyApp(ui = ui, server = server)
output$csv.plot <- renderPlot({
data <- input$data_file
ext <- tools::file_ext(data$datapath)
req(data)
validate(need(ext == "csv", "Please confirm uploaded file extension is saved
in a '.csv' format."))
data_1 <- read.csv(data$datapath, header = input$header)
)}
output$csv.plot <- renderPlot({
data <- input$data_file
ext <- tools::file_ext(data$datapath)
req(data)
validate(need(ext == "csv", "Please confirm uploaded file extension is saved
in a '.csv' format."))
data_1 <- read.csv(data$datapath, header = input$header)
)}
output$csv.plot <- renderPlot({
data <- input$data_file
ext <- tools::file_ext(data$datapath)
req(data)
validate(need(ext == "csv", "Please confirm uploaded file extension is saved
in a '.csv' format."))
data_1 <- read.csv(data$datapath, header = input$header)
)}
output$csv.plot <- renderPlot({
data <- input$data_file
ext <- tools::file_ext(data$datapath)
req(data)
validate(need(ext == "csv", "Please confirm uploaded file extension is saved
in a '.csv' format."))
data_1 <- read.csv(data$datapath, header = input$header)
)}
output$csv.plot <- renderPlot({
data <- input$data_file
ext <- tools::file_ext(data$datapath)
req(data)
validate(need(ext == "csv", "Please confirm uploaded file extension is saved
in a '.csv' format."))
data_1 <- read.csv(data$datapath, header = input$header)
)}
output$csv.plot <- renderPlot({
data <- input$data_file
ext <- tools::file_ext(data$datapath)
req(data)
validate(need(ext == "csv", "Please confirm uploaded file extension is saved
in a '.csv' format."))
data_1 <- read.csv(data$datapath, header = input$header)
)}
output$csv.plot <- renderPlot({
data <- input$data_file
ext <- tools::file_ext(data$datapath)
req(data)
validate(need(ext == "csv", "Please confirm uploaded file extension is saved
in a '.csv' format."))
data_1 <- read.csv(data$datapath, header = input$header)
)}
}
scatter_plot <- function(z) {
long_colony_counts <- pivot_longer(z,
cols = starts_with("T"),
names_to = "Time_Points",
values_to = "Cell_Density")
print(long_colony_counts)
melt_long_cc <- melt(long_colony_counts, id = "Time_Points")
ggplot(melt_long_cc, aes(x = Time_Points, y = Cell_Density, colour = variable, group = variable)) +
geom_line()
}
shinyApp(ui = ui, server = server)
output$csv.plot <- renderPlot({
data <- input$data_file
ext <- tools::file_ext(data$datapath)
req(data)
validate(need(ext == "csv", "Please confirm uploaded file extension is saved
in a '.csv' format."))
data_1 <- read.csv(data$datapath, header = input$header)
}
colony_counts <- read.csv("sample_data_1.csv")
scatter_plot <- function(z) {
long_colony_counts <- pivot_longer(z,
cols = starts_with("T"),
names_to = "Time_Points",
values_to = "Cell_Density")
print(long_colony_counts)
melt_long_cc <- melt(long_colony_counts, id = "Time_Points")
ggplot(melt_long_cc, aes(x = Time_Points, y = Cell_Density, colour = variable, group = variable)) +
geom_line()
)}
